{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const firebaseSlice = createSlice({\n  name: 'firebase',\n  initialState: {\n    user: null,\n    docs: [],\n    docsSigned: []\n  },\n  reducers: {\n    setUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.user = action.payload;\n    }\n  }\n});\nexport const {\n  setUser\n} = firebaseSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectUser = state => state.firebase.user;\nexport default firebaseSlice.reducer;","map":{"version":3,"sources":["C:/Users/boy/Desktop/pdf/pdftron-sign-app-master/src/firebase/firebaseSlice.js"],"names":["createSlice","firebaseSlice","name","initialState","user","docs","docsSigned","reducers","setUser","state","action","payload","actions","selectUser","firebase","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACvCE,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,IADM;AAEZC,IAAAA,IAAI,EAAE,EAFM;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFyB;AAOvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACL,IAAN,GAAaM,MAAM,CAACC,OAApB;AACD;AAPO;AAP6B,CAAD,CAAjC;AAkBP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAcP,aAAa,CAACW,OAAlC,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGJ,KAAK,IAAIA,KAAK,CAACK,QAAN,CAAeV,IAA3C;AAEP,eAAeH,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const firebaseSlice = createSlice({\n  name: 'firebase',\n  initialState: {\n    user: null,\n    docs: [],\n    docsSigned: [],\n  },\n  reducers: {\n    setUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.user = action.payload;\n    },\n  },\n});\n\nexport const { setUser } = firebaseSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectUser = state => state.firebase.user;\n\nexport default firebaseSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}