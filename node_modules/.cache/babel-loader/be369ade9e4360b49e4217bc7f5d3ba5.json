{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boy\\\\Desktop\\\\pdf\\\\Tubes-PI\\\\src\\\\components\\\\Lists\\\\SignList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Table, Text, Spinner } from 'gestalt';\nimport 'gestalt/dist/gestalt.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchForDocumentToSign } from '../../firebase/firebase';\nimport { selectUser } from '../../firebase/firebaseSlice';\nimport { setDocToSign } from '../SignDocument/SignDocumentSlice';\nimport { navigate } from '@reach/router';\n\nconst SignList = () => {\n  _s();\n\n  const user = useSelector(selectUser);\n  const {\n    email\n  } = user;\n  const [docs, setDocs] = useState([]);\n  const [show, setShow] = useState(true);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function getDocs() {\n      const docsToSign = await searchForDocumentToSign(email);\n      setDocs(docsToSign);\n      setShow(false);\n    }\n\n    setTimeout(getDocs, 1000);\n  }, [email]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, show ? /*#__PURE__*/React.createElement(Spinner, {\n    show: show,\n    accessibilityLabel: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, docs.length > 0 ? /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    weight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"From\")), /*#__PURE__*/React.createElement(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    weight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"When\")))), /*#__PURE__*/React.createElement(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, docs.map(doc => /*#__PURE__*/React.createElement(Table.Row, {\n    key: doc.docRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }\n  }, doc.email)), /*#__PURE__*/React.createElement(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }\n  }, doc.requestedTime ? new Date(doc.requestedTime.seconds * 1000).toDateString() : '')), /*#__PURE__*/React.createElement(Table.Cell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => {\n      const {\n        docRef,\n        docId\n      } = doc;\n      dispatch(setDocToSign({\n        docRef,\n        docId\n      }));\n      navigate(`/signDocument`);\n    },\n    text: \"Sign\",\n    color: \"blue\",\n    inline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  })))))) : 'You do not have any documents to sign'));\n};\n\n_s(SignList, \"I2LFGr4wsNs6P4JH3m8USgLkDxE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SignList;\nexport default SignList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignList\");","map":{"version":3,"sources":["C:/Users/boy/Desktop/pdf/Tubes-PI/src/components/Lists/SignList.js"],"names":["React","useEffect","useState","Button","Table","Text","Spinner","useDispatch","useSelector","searchForDocumentToSign","selectUser","setDocToSign","navigate","SignList","user","email","docs","setDocs","show","setShow","dispatch","getDocs","docsToSign","setTimeout","length","map","doc","docRef","requestedTime","Date","seconds","toDateString","event","docId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Table, Text, Spinner } from 'gestalt';\nimport 'gestalt/dist/gestalt.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchForDocumentToSign } from '../../firebase/firebase';\nimport { selectUser } from '../../firebase/firebaseSlice';\nimport { setDocToSign } from '../SignDocument/SignDocumentSlice';\nimport { navigate } from '@reach/router';\n\nconst SignList = () => {\n  const user = useSelector(selectUser);\n  const { email } = user;\n\n  const [docs, setDocs] = useState([]);\n  const [show, setShow] = useState(true);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function getDocs() {\n      const docsToSign = await searchForDocumentToSign(email);\n      setDocs(docsToSign);\n      setShow(false);\n    }\n\n    setTimeout(getDocs, 1000);\n  }, [email]);\n\n  return (\n    <div>\n      {show ? (\n        <Spinner show={show} accessibilityLabel=\"spinner\" />\n      ) : (\n        <div>\n          {docs.length > 0 ? (\n            <Table>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <Text weight=\"bold\">From</Text>\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <Text weight=\"bold\">When</Text>\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {docs.map(doc => (\n                  <Table.Row key={doc.docRef}>\n                    <Table.Cell>\n                      <Text>{doc.email}</Text>\n                    </Table.Cell>\n                    <Table.Cell>\n                      <Text>{doc.requestedTime ? new Date(doc.requestedTime.seconds*1000).toDateString() : ''}</Text>\n                    </Table.Cell>\n                    <Table.Cell>\n                      <Button\n                        onClick={event => {\n                          const { docRef, docId } = doc;\n                          dispatch(setDocToSign({ docRef, docId }));\n                          navigate(`/signDocument`);\n                        }}\n                        text=\"Sign\"\n                        color=\"blue\"\n                        inline\n                      />\n                    </Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          ) : (\n            'You do not have any documents to sign'\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SignList;\n"]},"metadata":{},"sourceType":"module"}