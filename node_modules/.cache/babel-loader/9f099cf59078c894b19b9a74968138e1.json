{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport { mergeAnnotations } from '../components/MergeAnnotations/MergeAnnotations';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('Error creating user document', error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error('Error fetching user', error);\n  }\n};\n\nexport const addDocumentToSign = async (uid, email, docRef, emails) => {\n  if (!uid) return;\n  const signed = false;\n  const xfdf = [];\n  const signedBy = [];\n  const requestedTime = new Date();\n  const signedTime = '';\n  firestore.collection('documentsToSign').add({\n    uid,\n    email,\n    docRef,\n    emails,\n    xfdf,\n    signedBy,\n    signed,\n    requestedTime,\n    signedTime\n  }).then(function (docRef) {\n    console.log('Document written with ID: ', docRef.id);\n  }).catch(function (error) {\n    console.error('Error adding document: ', error);\n  });\n};\nexport const updateDocumentToSign = async (docId, email, xfdfSigned) => {\n  const documentRef = firestore.collection('documentsToSign').doc(docId);\n  documentRef.get().then(async doc => {\n    if (doc.exists) {\n      const {\n        signedBy,\n        emails,\n        xfdf,\n        docRef\n      } = doc.data();\n\n      if (!signedBy.includes(email)) {\n        const signedByArray = [...signedBy, email];\n        const xfdfArray = [...xfdf, xfdfSigned];\n        await documentRef.update({\n          xfdf: xfdfArray,\n          signedBy: signedByArray\n        });\n\n        if (signedByArray.length === emails.length) {\n          const time = new Date();\n          await documentRef.update({\n            signed: true,\n            signedTime: time\n          });\n          mergeAnnotations(docRef, xfdfArray);\n        }\n      }\n    } else {\n      console.log('No such document!');\n    }\n  }).catch(function (error) {\n    console.log('Error getting document:', error);\n  });\n};\nexport const searchForDocumentToSign = async email => {\n  const documentsRef = firestore.collection('documentsToSign');\n  const query = documentsRef.where('emails', 'array-contains', email).where('signed', '==', false);\n  const querySigned = documentsRef.where('signedBy', 'array-contains', email);\n  const docIds = [];\n  const docIdSigned = [];\n  await querySigned.get().then(function (querySnapshot) {\n    querySnapshot.forEach(function (doc) {\n      const docId = doc.id;\n      docIdSigned.push(docId);\n    });\n  }).catch(function (error) {\n    console.log('Error getting documents: ', error);\n  });\n  await query.get().then(function (querySnapshot) {\n    querySnapshot.forEach(function (doc) {\n      const {\n        docRef,\n        email,\n        requestedTime\n      } = doc.data();\n      const docId = doc.id;\n\n      if (!docIdSigned.includes(docId)) {\n        docIds.push({\n          docRef,\n          email,\n          requestedTime,\n          docId\n        });\n      }\n    });\n  }).catch(function (error) {\n    console.log('Error getting documents: ', error);\n  });\n  return docIds;\n};\nexport const searchForDocumentsSigned = async email => {\n  const documentsRef = firestore.collection('documentsToSign');\n  const docIds = [];\n  let query = documentsRef.where('email', '==', email).where('signed', '==', true);\n  await query.get().then(function (querySnapshot) {\n    querySnapshot.forEach(function (doc) {\n      const {\n        docRef,\n        emails,\n        signedTime\n      } = doc.data();\n      const docId = doc.id;\n      docIds.push({\n        docRef,\n        emails,\n        signedTime,\n        docId\n      });\n    });\n  }).catch(function (error) {\n    console.log('Error getting documents: ', error);\n  });\n  return docIds;\n};","map":{"version":3,"sources":["C:/Users/boy/Desktop/pdf/Tubes-PI/src/firebase/firebase.js"],"names":["firebase","mergeAnnotations","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","initializeApp","auth","firestore","storage","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","generateUserDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","email","displayName","photoURL","set","error","console","getUserDocument","userDocument","data","addDocumentToSign","docRef","emails","signed","xfdf","signedBy","requestedTime","Date","signedTime","collection","add","then","log","id","catch","updateDocumentToSign","docId","xfdfSigned","documentRef","includes","signedByArray","xfdfArray","update","length","time","searchForDocumentToSign","documentsRef","query","where","querySigned","docIds","docIdSigned","querySnapshot","forEach","push","searchForDocumentsSigned"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nimport { mergeAnnotations } from '../components/MergeAnnotations/MergeAnnotations';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n  if (!snapshot.exists) {\n    const { email, displayName, photoURL } = user;\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.error('Error creating user document', error);\n    }\n  }\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data(),\n    };\n  } catch (error) {\n    console.error('Error fetching user', error);\n  }\n};\n\nexport const addDocumentToSign = async (uid, email, docRef, emails) => {\n  if (!uid) return;\n  const signed = false;\n  const xfdf = [];\n  const signedBy = [];\n  const requestedTime = new Date();\n  const signedTime = '';\n  firestore\n    .collection('documentsToSign')\n    .add({\n      uid,\n      email,\n      docRef,\n      emails,\n      xfdf,\n      signedBy,\n      signed,\n      requestedTime,\n      signedTime,\n    })\n    .then(function (docRef) {\n      console.log('Document written with ID: ', docRef.id);\n    })\n    .catch(function (error) {\n      console.error('Error adding document: ', error);\n    });\n};\n\nexport const updateDocumentToSign = async (docId, email, xfdfSigned) => {\n  const documentRef = firestore.collection('documentsToSign').doc(docId);\n  documentRef\n    .get()\n    .then(async doc => {\n      if (doc.exists) {\n        const { signedBy, emails, xfdf, docRef } = doc.data();\n        if (!signedBy.includes(email)) {\n          const signedByArray = [...signedBy, email];\n          const xfdfArray = [...xfdf, xfdfSigned];\n          await documentRef.update({\n            xfdf: xfdfArray,\n            signedBy: signedByArray,\n          });\n\n          if (signedByArray.length === emails.length) {\n            const time = new Date();\n            await documentRef.update({\n              signed: true,\n              signedTime: time,\n            });\n\n            mergeAnnotations(docRef, xfdfArray);\n          }\n        }\n      } else {\n        console.log('No such document!');\n      }\n    })\n    .catch(function (error) {\n      console.log('Error getting document:', error);\n    });\n};\n\nexport const searchForDocumentToSign = async email => {\n  const documentsRef = firestore.collection('documentsToSign');\n  const query = documentsRef\n    .where('emails', 'array-contains', email)\n    .where('signed', '==', false);\n\n  const querySigned = documentsRef\n    .where('signedBy', 'array-contains', email);\n\n  const docIds = [];\n  const docIdSigned = [];\n\n  await querySigned\n    .get()\n    .then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        const docId = doc.id;\n        docIdSigned.push(docId);\n      });\n    })\n    .catch(function (error) {\n      console.log('Error getting documents: ', error);\n    });\n\n  await query\n    .get()\n    .then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        const { docRef, email, requestedTime } = doc.data();\n        const docId = doc.id;\n        if (!docIdSigned.includes(docId)) {\n          docIds.push({ docRef, email, requestedTime, docId });\n        }\n      });\n    })\n    .catch(function (error) {\n      console.log('Error getting documents: ', error);\n    });\n  return docIds;\n};\n\nexport const searchForDocumentsSigned = async email => {\n  const documentsRef = firestore.collection('documentsToSign');\n\n  const docIds = [];\n\n  let query = documentsRef\n    .where('email', '==', email)\n    .where('signed', '==', true);\n\n  await query\n    .get()\n    .then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        const { docRef, emails, signedTime } = doc.data();\n        const docId = doc.id;\n        docIds.push({ docRef, emails, signedTime, docId });\n      });\n    })\n    .catch(function (error) {\n      console.log('Error getting documents: ', error);\n    });\n\n  return docIds;\n};\n"]},"metadata":{},"sourceType":"module"}